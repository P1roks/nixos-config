From beb15d7a644ca550824323188265f80b04b894a1 Mon Sep 17 00:00:00 2001
From: P1roks <piotrekjakobczyk1@gmail.com>
Date: Tue, 30 Jul 2024 17:38:06 +0200
Subject: [PATCH] my dwmblocks

---
 dwmblocks.c | 47 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 46 insertions(+), 1 deletion(-)

diff --git a/dwmblocks.c b/dwmblocks.c
index befd252..4501ac4 100644
--- a/dwmblocks.c
+++ b/dwmblocks.c
@@ -34,6 +34,7 @@ void setupsignals();
 void sighandler(int signum);
 int getstatus(char *str, char *last);
 void statusloop();
+void buttonhandler(int sig, siginfo_t *si, void *ucontext);
 void termhandler();
 void pstdout();
 #ifndef NO_X
@@ -58,8 +59,15 @@ static int returnStatus = 0;
 //opens process *cmd and stores output in *output
 void getcmd(const Block *block, char *output)
 {
+	if (block->signal)
+	{
+		output[0] = block->signal;
+		output++;
+	}
 	strcpy(output, block->icon);
-	FILE *cmdf = popen(block->command, "r");
+
+	char *cmd = block->command;
+	FILE *cmdf = popen(cmd,"r");
 	if (!cmdf)
 		return;
 	int i = strlen(block->icon);
@@ -102,6 +110,7 @@ void getsigcmds(unsigned int signal)
 
 void setupsignals()
 {
+	struct sigaction sa;
 #ifndef __OpenBSD__
 	    /* initialize all real time signals with dummy handler */
     for (int i = SIGRTMIN; i <= SIGRTMAX; i++)
@@ -110,8 +119,16 @@ void setupsignals()
 
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		if (blocks[i].signal > 0)
+		{
 			signal(SIGMINUS+blocks[i].signal, sighandler);
+			sigaddset(&sa.sa_mask, SIGRTMIN+blocks[i].signal);
+		}
 	}
+	sa.sa_sigaction = buttonhandler;
+	sa.sa_flags = SA_SIGINFO;
+	sigaction(SIGUSR1, &sa, NULL);
+	signal(SIGCHLD, SIG_IGN);
+
 
 }
 
@@ -145,6 +162,34 @@ int setupX()
 	root = RootWindow(dpy, screen);
 	return 1;
 }
+
+void buttonhandler(int sig, siginfo_t *si, void *ucontext)
+{
+	int button = si->si_value.sival_int & 0xff;
+	sig = si->si_value.sival_int >> 8;
+	getsigcmds(sig);
+	writestatus();
+	if (fork() == 0)
+	{
+		static char exportstring[CMDLENGTH + 22] = "export BLOCK_BUTTON=-;";
+		const Block *current;
+		int i;
+		for (i = 0; i < LENGTH(blocks); i++)
+		{
+			current = blocks + i;
+			if (current->signal == sig)
+				break;
+		}
+		char *cmd = strcat(exportstring, blocks[i].command);
+		cmd[20] = '0' + button;
+		char *command[] = { "/bin/sh", "-c", cmd, NULL };
+		setsid();
+		execvp(command[0], command);
+		exit(EXIT_SUCCESS);
+		cmd[22] = '\0';
+	}
+}
+
 #endif
 
 void pstdout()
-- 
2.44.1

